name: build

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install Crystal (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: crystal-lang/install-crystal@v1
        with:
          crystal: latest

      - name: Install Crystal (MinGW64)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-crystal
            mingw-w64-x86_64-shards
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-xz
            mingw-w64-x86_64-curl
            mingw-w64-x86_64-libdeflate
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-libtre
            mingw-w64-x86_64-libsystre
            zip
            file

      - name: Set version variables
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${{ github.ref_name }}
          else
            VERSION="build-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BIN=bamboo" >> $GITHUB_ENV

      - name: Install dependencies (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: shards install --without-development

      - name: Install dependencies (MinGW64)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: shards install --without-development

      - name: Build on Linux (GTK + system libhts)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential pkg-config \
            libgtk-3-dev libpango1.0-dev libcairo2-dev libgdk-pixbuf-2.0-dev libx11-dev \
            zlib1g-dev libbz2-dev liblzma-dev libdeflate-dev autoconf automake libtool git \
            libgc-dev libpcre2-dev

          # Build local static htslib without libcurl (to avoid curl variants)
          git clone --depth 1 --branch develop https://github.com/samtools/htslib.git htslib
          (
            cd htslib && \
            git submodule update --init --recursive && \
            autoreconf -i && \
            ./configure --disable-libcurl --disable-shared --enable-static && \
            make -j2
          )

          # Provide lib path for static link
          export LIBRARY_PATH="$(pwd)/htslib"
          export CRYSTAL_LIBRARY_PATH="$(pwd)/htslib"

          # Link against static libhts and compression libs
          shards build --release --link-flags="-L$(pwd)/htslib -Wl,--start-group -l:libhts.a -lbz2 -llzma -lz -ldeflate -Wl,--end-group"

          PKG=bamboo-${VERSION}-${{ matrix.target }}
          mkdir -p "$PKG"
          cp bin/$BIN "$PKG/"
          cp LICENSE "$PKG/"
          cp README.md "$PKG/"
          tar czf "$PKG.tar.gz" "$PKG"

      - name: Build on macOS (static libhts)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew update
          brew install pkg-config autoconf automake libtool bzip2 xz zlib

          # Build local static htslib without libcurl (to reduce extra deps)
          git clone --depth 1 --branch develop https://github.com/samtools/htslib.git htslib
          (
            cd htslib && \
            git submodule update --init --recursive && \
            autoreconf -i && \
            ./configure --disable-libcurl --disable-shared --enable-static && \
            make -j2
          )

          # Provide libhtslib.a for darwin (hts.cr links as -lhtslib on macOS)
          ln -sf "$(pwd)/htslib/libhts.a" "$(pwd)/htslib/libhtslib.a"

          # Prefer the local static libhts.a
          export LIBRARY_PATH="$(pwd)/htslib"
          export CRYSTAL_LIBRARY_PATH="$(pwd)/htslib"

          # Force load static libhts and link required system libs
          shards build --release --link-flags="-Wl,-force_load,$(pwd)/htslib/libhts.a -lbz2 -llzma -lz -framework CoreFoundation -framework SystemConfiguration"

          # Verify no dynamic libhts is linked
          otool -L bin/$BIN | tee otool.txt
          if grep -E -q "libhts.*dylib|libhtslib.*dylib" otool.txt; then
            echo "Error: dynamic libhts linked on macOS (should be static)" >&2
            exit 1
          fi

          PKG=bamboo-${VERSION}-${{ matrix.target }}
          mkdir -p "$PKG"
          cp bin/$BIN "$PKG/"
          cp LICENSE "$PKG/"
          cp README.md "$PKG/"
          tar czf "$PKG.tar.gz" "$PKG"

      - name: Build on Windows (MinGW64 + static libhts)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          pacman -S --noconfirm --needed autoconf automake libtool make git \
            mingw-w64-x86_64-toolchain mingw-w64-x86_64-bzip2 mingw-w64-x86_64-xz \
            mingw-w64-x86_64-zlib mingw-w64-x86_64-libdeflate

          git clone --depth 1 --branch develop https://github.com/samtools/htslib.git htslib
          cd htslib
          git submodule update --init --recursive
          autoreconf -i
          ./configure --disable-libcurl --disable-shared --enable-static
          make -j2
          # ensure static archive exists
          test -f libhts.a || { echo "libhts.a not found" >&2; ls -l; exit 1; }
          # Prefer static archive and avoid accidentally linking DLLs
          rm -f *.dll *.dll.a *.lib || true
          cd ..

          # Add local htslib to library search path
          export LIBRARY_PATH="$(pwd)/htslib"
          export CRYSTAL_LIBRARY_PATH="$(pwd)/htslib"
          STATIC_LIBS="-L$(pwd)/htslib -Wl,--start-group -l:libhts.a -lbz2 -llzma -lz -ldeflate -lregex -ltre -Wl,--end-group -lws2_32"
          echo "Using STATIC_LIBS=$STATIC_LIBS"

          shards build --release --link-flags="$STATIC_LIBS"

          PKG=bamboo-${VERSION}-${{ matrix.target }}
          mkdir -p "$PKG"
          cp bin/$BIN.exe "$PKG/"
          cp LICENSE "$PKG/"
          cp README.md "$PKG/"
          zip -r "$PKG.zip" "$PKG"

      - name: Upload artifacts (non-release)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: bamboo-${{ matrix.target }}
          path: |
            bamboo-*.tar.gz
            bamboo-*.zip

      - name: Upload release assets (release only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            bamboo-*.tar.gz
            bamboo-*.zip
